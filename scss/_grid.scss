/**
 * _grid.scss
 * 
 * grid generation and general layout styling
 * 
 */

/* .......................................................................... */

/**
 * sections
 * 
 * add padding to space them out vertically
 */
.section {
    padding-top: $section-top-padding;
    padding-bottom: $section-bottom-padding;
}

/**
 * rows 
 * 
 * default width creates margins on the sides
 * flex-direction is colum so that columns stack on mobile
 * 
 */
*[class^="row"], *[class*=" row"] {
    display: flex;
    flex-direction: column;
    width: $row-width;
    margin: 0 auto; 

    &:not(:last-child) {
        margin-bottom: 1em;
    }
}


/* Unstack columns at medium breakpoint */
@media (min-width: map-get($breakpoints, md)) {
    .row {
        flex-direction: unset;
    }
}

/**
 * cols
 * 
 * use padding as means of setting gutter, then negative margins for mobile
 * (credit to Bootstrap for this trick)
 * use bottom margins to space out cols vertically on mobile, and unset
 * these at larger size
 * 
 */
*[class^="col-"], *[class*=" col-"] {
    padding-left: $col-gutter-size;
    padding-right: $col-gutter-size;
    margin-left: -$col-gutter-size;
    margin-right: -$col-gutter-size;
}

*[class^="col-"]:not(:last-child), 
*[class*=" col-"]:not(:last-child) {
    margin-bottom: $col-margin-bottom;
}

@media (min-width: map-get($breakpoints, md)) {
    *[class^="col-"], *[class*=" col-"] {
        margin-left: 0;
        margin-right: 0;
    }

    *[class^="col-"]:not(:last-child), 
    *[class*=" col-"]:not(:last-child) {
        margin-bottom: 0;
    }
}


/**
 * grid generator helper
 * generate a width percentage from a number
 * ex: get-col-width(3) => percentage(3/6) = 50%
 */
@function get-col-width($number) {
    @return percentage($number / $maxcols);
}


/**
 * grid generator
 * For each breakpoint, generates a media query with all possible suffixes.
 */
@each $breakpoint-name, $breakpoint-value in $breakpoints {
    @if ($breakpoint-name != null) {
        $breakpoint-name: "-" + $breakpoint-name;
    }

    @media (min-width: #{$breakpoint-value}) {
        @for $i from 1 through $maxcols {
            .row-#{$i}#{$breakpoint-name} {
                width: get-col-width($i);
                @if ($i == $maxcols) {
                    flex-direction: column;
                }
                @else {
                    flex-direction: unset;
                }
            }
            
            .col-#{$i}#{$breakpoint-name} {
                width: get-col-width($i);
            }
        }
    }
}


